### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type BusinessUnit {
  company: Company!
  id: ID!
  name: String!
  projectProfiles(after: String, before: String, first: Int, last: Int, skip: Int): [ProjectProfile!]!
}

type Company {
  businessUnits(after: String, before: String, first: Int, last: Int, skip: Int): [BusinessUnit!]!
  id: ID!
  name: String!
  projects(after: String, before: String, first: Int, last: Int, skip: Int): [Project!]!
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]!
}

input CreateProjectInput {
  name: String!
  ownerId: String!
}

input CreateProjectProfileInput {
  businessUnitId: String!
}

input CreateProjectProfilesInput {
  projectId: String!
  projectProfiles: [CreateProjectProfileInput!]!
}

scalar DateTime

type Mutation {
  createProject(input: CreateProjectInput!): Project!
  createProjectProfiles(input: CreateProjectProfilesInput!): [ProjectProfile!]!
}

type Project {
  company: Company!
  createdAt: DateTime!
  id: ID!
  name: String!
  owner: User!
  projectProfiles(after: String, before: String, first: Int, last: Int, skip: Int): [ProjectProfile!]!
  url: String!
}

type ProjectProfile {
  businessUnit: BusinessUnit!
  id: ID!
  project: Project!
  spend(after: String, before: String, first: Int, last: Int, skip: Int): [Spend!]!
}

type Query {
  projects(after: String, before: String, first: Int, last: Int, skip: Int): [Project!]!
}

type Spend {
  actualSavings: Int
  baselineSpend: Int!
  forecastedSavings: Int!
  id: ID!
  month: DateTime!
  projectProfile: ProjectProfile!
}

type User {
  company: Company!
  firstName: String!
  id: ID!
  lastName: String!
  projects(after: String, before: String, first: Int, last: Int, skip: Int): [Project!]!
}
